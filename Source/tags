!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Zain/CProjects/SDLProjects/Pong/Source/	//
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
SDL_MAIN_HANDLED	main.c	/^#define SDL_MAIN_HANDLED$/;"	d	file:
WHITE	main.c	/^#define WHITE /;"	d	file:
BLACK	main.c	/^#define BLACK /;"	d	file:
GREY	main.c	/^#define GREY /;"	d	file:
PADDLE_STATE_NONE	main.c	/^#define PADDLE_STATE_NONE /;"	d	file:
PADDLE_STATE_UP	main.c	/^#define PADDLE_STATE_UP /;"	d	file:
PADDLE_STATE_DOWN	main.c	/^#define PADDLE_STATE_DOWN /;"	d	file:
TRUE	main.c	/^#define TRUE /;"	d	file:
FALSE	main.c	/^#define FALSE /;"	d	file:
GAME_POINT	main.c	/^#define GAME_POINT /;"	d	file:
MENU	main.c	/^#define MENU /;"	d	file:
GET_READY	main.c	/^#define GET_READY /;"	d	file:
IN_GAME	main.c	/^#define IN_GAME /;"	d	file:
RESULT	main.c	/^#define RESULT /;"	d	file:
PAUSE	main.c	/^#define PAUSE /;"	d	file:
INTRO	main.c	/^#define INTRO /;"	d	file:
GAME	main.c	/^#define GAME /;"	d	file:
TITLE	main.c	/^#define TITLE /;"	d	file:
PLAYERS_NOT_READY	main.c	/^#define PLAYERS_NOT_READY /;"	d	file:
PLAYER_1_READY	main.c	/^#define PLAYER_1_READY /;"	d	file:
PLAYER_2_READY	main.c	/^#define PLAYER_2_READY /;"	d	file:
SCREEN_RES_HEIGHT	main.c	/^#define SCREEN_RES_HEIGHT /;"	d	file:
SCREEN_RES_WIDTH	main.c	/^#define SCREEN_RES_WIDTH /;"	d	file:
PADDLE_WIDTH	main.c	/^#define PADDLE_WIDTH /;"	d	file:
PADDLE_HEIGHT	main.c	/^#define PADDLE_HEIGHT /;"	d	file:
PADDLE01_DEFAULT_X_POS	main.c	/^#define PADDLE01_DEFAULT_X_POS /;"	d	file:
PADDLE01_DEFAULT_Y_POS	main.c	/^#define PADDLE01_DEFAULT_Y_POS /;"	d	file:
PADDLE02_DEFAULT_X_POS	main.c	/^#define PADDLE02_DEFAULT_X_POS /;"	d	file:
PADDLE02_DEFAULT_Y_POS	main.c	/^#define PADDLE02_DEFAULT_Y_POS /;"	d	file:
Speed	main.c	/^typedef struct Speed{$/;"	s	file:
x	main.c	/^    float x;$/;"	m	struct:Speed	typeref:typename:float	file:
y	main.c	/^    float y;$/;"	m	struct:Speed	typeref:typename:float	file:
Speed	main.c	/^} Speed;$/;"	t	typeref:struct:Speed	file:
Pos	main.c	/^typedef struct Pos{$/;"	s	file:
x	main.c	/^    int x;$/;"	m	struct:Pos	typeref:typename:int	file:
y	main.c	/^    int y;$/;"	m	struct:Pos	typeref:typename:int	file:
Pos	main.c	/^} Pos;$/;"	t	typeref:struct:Pos	file:
TextObject	main.c	/^typedef struct TextObject{$/;"	s	file:
texture	main.c	/^    SDL_Texture * texture;$/;"	m	struct:TextObject	typeref:typename:SDL_Texture *	file:
text	main.c	/^    char * text;$/;"	m	struct:TextObject	typeref:typename:char *	file:
rect	main.c	/^    SDL_Rect rect;$/;"	m	struct:TextObject	typeref:typename:SDL_Rect	file:
TextObject	main.c	/^}TextObject;$/;"	t	typeref:struct:TextObject	file:
sfx	main.c	/^typedef struct sfx{$/;"	s	file:
paddleHit	main.c	/^    Mix_Chunk *paddleHit;$/;"	m	struct:sfx	typeref:typename:Mix_Chunk *	file:
gainScore	main.c	/^    Mix_Chunk *gainScore;$/;"	m	struct:sfx	typeref:typename:Mix_Chunk *	file:
sfx	main.c	/^}sfx;$/;"	t	typeref:struct:sfx	file:
CheckCollision	main.c	/^uint8_t CheckCollision(SDL_Rect a, SDL_Rect b)$/;"	f	typeref:typename:uint8_t
main	main.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
IncreaseScore	main.c	/^void IncreaseScore(int *score, char * scoreText, char *gameState)$/;"	f	typeref:typename:void
InitializeText	main.c	/^int InitializeText(TTF_Font *font,char* text, SDL_Color textColor, SDL_Renderer *renderer, $/;"	f	typeref:typename:int
HandleReadyState	main.c	/^void HandleReadyState(char * gameState, char playerState, char * sceneID)$/;"	f	typeref:typename:void
HandleGameStateMenu	main.c	/^void HandleGameStateMenu(char * gameState)$/;"	f	typeref:typename:void
ResetScore	main.c	/^void ResetScore(int * scoreP1,char * scoreP1Text ,int * scoreP2, char * scoreP2Text)$/;"	f	typeref:typename:void
ResetData	main.c	/^int ResetData(SDL_Rect *ball, Speed *currentBallSpeed, float *ballBoost,char * playerState$/;"	f	typeref:typename:int
CreateFont	main.c	/^int CreateFont(TTF_Font **font, unsigned int fontSize)$/;"	f	typeref:typename:int
